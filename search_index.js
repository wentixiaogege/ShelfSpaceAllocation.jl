var documenterSearchIndex = {"docs":
[{"location":"api/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Documentation for ShelfSpaceAllocation.jl's interface.","category":"page"},{"location":"api/#Model-1","page":"API","title":"Model","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"ShelfSpaceAllocationModel\nSpecs\nParams\nVariables\nObjectives\nVariables(::ShelfSpaceAllocationModel)\nObjectives(::ShelfSpaceAllocationModel)\nShelfSpaceAllocationModel(::Params, ::Specs)","category":"page"},{"location":"api/#ShelfSpaceAllocation.ShelfSpaceAllocationModel","page":"API","title":"ShelfSpaceAllocation.ShelfSpaceAllocationModel","text":"ShelfSpaceAllocationModel type as JuMP.Model\n\n\n\n\n\n","category":"type"},{"location":"api/#ShelfSpaceAllocation.Specs","page":"API","title":"ShelfSpaceAllocation.Specs","text":"Specs\n\n\n\n\n\n","category":"type"},{"location":"api/#ShelfSpaceAllocation.Params","page":"API","title":"ShelfSpaceAllocation.Params","text":"Parameters\n\n\n\n\n\n","category":"type"},{"location":"api/#ShelfSpaceAllocation.Variables","page":"API","title":"ShelfSpaceAllocation.Variables","text":"Variables\n\n\n\n\n\n","category":"type"},{"location":"api/#ShelfSpaceAllocation.Objectives","page":"API","title":"ShelfSpaceAllocation.Objectives","text":"Objectives\n\n\n\n\n\n","category":"type"},{"location":"api/#ShelfSpaceAllocation.Variables-Tuple{JuMP.Model}","page":"API","title":"ShelfSpaceAllocation.Variables","text":"Variable values from model.\n\nArguments\n\nmodel::ShelfSpaceAllocationModel\n\n\n\n\n\n","category":"method"},{"location":"api/#ShelfSpaceAllocation.Objectives-Tuple{JuMP.Model}","page":"API","title":"ShelfSpaceAllocation.Objectives","text":"Objective values from model.\n\nArguments\n\nmodel::ShelfSpaceAllocationModel\n\n\n\n\n\n","category":"method"},{"location":"api/#ShelfSpaceAllocation.ShelfSpaceAllocationModel-Tuple{Params,Specs}","page":"API","title":"ShelfSpaceAllocation.ShelfSpaceAllocationModel","text":"Mixed Integer Linear Program (MILP) formulation of the Shelf Space Allocation Problem (SSAP).\n\nArguments\n\nparameters::Params\nspecs::Specs\n\n\n\n\n\n","category":"method"},{"location":"api/#IO-1","page":"API","title":"IO","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"note: Note\nJSON stores multi-dimensional arrays as nested arrays. If we load an array a whose elements are accessed a[i, j, k], the elements of the nested array are accessed in reverse order a[k][j][i]. However, the function load_json converts the nested arrays back to multi-dimensional arrays.","category":"page"},{"location":"api/#","page":"API","title":"API","text":"We use simple plain text formats CSV and JSON for input and output of numerical values.","category":"page"},{"location":"api/#","page":"API","title":"API","text":"Params(::AbstractString, ::AbstractString)\nsave_json\nload_json","category":"page"},{"location":"api/#ShelfSpaceAllocation.Params-Tuple{AbstractString,AbstractString}","page":"API","title":"ShelfSpaceAllocation.Params","text":"Load sets, subsets and parameters from CSV files.\n\nEach CSV file in product_path contains following attributes:\n\nproduct_id\ncategory_id\nbrand_id\nwidth\nheight\ndepth\nweight\nmonthly_demand\nreplenishment_interval\nprice\nunit_margin\nblocking_field\nmin_facing\nmax_facing\nmax_stack\nup_down_order_criteria\n\nEach CSV file in shelf_path contains following attributes:\n\nmodule\nid\nlevel\ntotal_width\ntotal_height\ntotal_length\nproduct_min_unit_weight\nproduct_max_unit_weight\n\nExamples of input parameters can found inside examples/instances directory.\n\nArguments\n\nproduct_path::AbstractString\nshelf_path::AbstractString\n\n\n\n\n\n","category":"method"},{"location":"api/#ShelfSpaceAllocation.save_json","page":"API","title":"ShelfSpaceAllocation.save_json","text":"Save object into JSON file.\n\nArguments\n\nobject\noutput_path::AbstractString: Full filepath, e.g., path.json.\n\n\n\n\n\n","category":"function"},{"location":"api/#ShelfSpaceAllocation.load_json","page":"API","title":"ShelfSpaceAllocation.load_json","text":"Load values to type from JSON file.\n\nArguments\n\ntype\nfilepath::AbstractString\n\n\n\n\n\n","category":"function"},{"location":"api/#Plotting-1","page":"API","title":"Plotting","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"plot_planogram\nplot_planograms\nplot_planogram_no_blocks\nplot_planograms_no_blocks\nplot_product_facings\nplot_demand_and_sales\nplot_demand_sales_percentage\nplot_allocation_amount\nplot_allocation_percentage","category":"page"},{"location":"api/#ShelfSpaceAllocation.plot_planogram","page":"API","title":"ShelfSpaceAllocation.plot_planogram","text":"Creates a planogram which visualizes the product placement on the shelves.\n\n\n\n\n\n","category":"function"},{"location":"api/#ShelfSpaceAllocation.plot_planograms","page":"API","title":"ShelfSpaceAllocation.plot_planograms","text":"Create a planogram for each module.\n\n\n\n\n\n","category":"function"},{"location":"api/#ShelfSpaceAllocation.plot_planogram_no_blocks","page":"API","title":"ShelfSpaceAllocation.plot_planogram_no_blocks","text":"Creates a planogram which visualizes the product placement on the shelves without blocks.\n\n\n\n\n\n","category":"function"},{"location":"api/#ShelfSpaceAllocation.plot_planograms_no_blocks","page":"API","title":"ShelfSpaceAllocation.plot_planograms_no_blocks","text":"Create a planogram for each module without blocks.\n\n\n\n\n\n","category":"function"},{"location":"api/#ShelfSpaceAllocation.plot_product_facings","page":"API","title":"ShelfSpaceAllocation.plot_product_facings","text":"Creates a barchart of number of product facings per product.\n\n\n\n\n\n","category":"function"},{"location":"api/#ShelfSpaceAllocation.plot_demand_and_sales","page":"API","title":"ShelfSpaceAllocation.plot_demand_and_sales","text":"Bar chart of demand and sales per product.\n\n\n\n\n\n","category":"function"},{"location":"api/#ShelfSpaceAllocation.plot_demand_sales_percentage","page":"API","title":"ShelfSpaceAllocation.plot_demand_sales_percentage","text":"Percentage of demand satisfied by sales per block.\n\n\n\n\n\n","category":"function"},{"location":"api/#ShelfSpaceAllocation.plot_allocation_amount","page":"API","title":"ShelfSpaceAllocation.plot_allocation_amount","text":"Plot the total amount of allocated facings per product per block.\n\n\n\n\n\n","category":"function"},{"location":"api/#ShelfSpaceAllocation.plot_allocation_percentage","page":"API","title":"ShelfSpaceAllocation.plot_allocation_percentage","text":"Plot the percentage of allocated facings of maximum facings per block.\n\n\n\n\n\n","category":"function"},{"location":"api/#Model-Reference-1","page":"API","title":"Model Reference","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Sets and Subsets","category":"page"},{"location":"api/#","page":"API","title":"API","text":"pP – A set of products.\nsS – A set of shelves.\nbB – A set of blocks. Blocks are an index of mutually exclusive subsets of products.\nmM – A set of modules. Modules are an index of a mutually exclusive subset of shelves.\nP_bP – A block is a subset of products.\nS_mS – A module is a subset of shelves.","category":"page"},{"location":"api/#","page":"API","title":"API","text":"Parameters","category":"page"},{"location":"api/#","page":"API","title":"API","text":"N_p^min, N_p^max – The minimum and maximum number of facings for product p\nG_p – Unit profit of product p; used as shortage penalty (treated to be max0 G_p\nR_p – Replenishment period of product p\nD_p – Demand forecast of product p\nL_p – Priority weight for height placement of product p\nW_p – Facing width of product p\nH_p – Height of product p\nM_p – Unit weight of product p\nP_ps – Number units per facing of product p on shelf s\nM_s^min, M_s^max – The minimum and maximum unit weight on shelf s\nW_s – Width of shelf s\nH_s – Height of shelf s\nL_p – Shelf level, counted from bottom to top\nSL – Slack, maximum difference in block starting points and between block max and min width\nw_1=05\nw_2=100\nw_3=01","category":"page"},{"location":"api/#","page":"API","title":"API","text":"Objective","category":"page"},{"location":"api/#","page":"API","title":"API","text":"min left(w_1 _s o_s + w_2 _p G_p e_p + w_3 _ps L_p L_s n_psright)","category":"page"},{"location":"api/#","page":"API","title":"API","text":"Basic Variables","category":"page"},{"location":"api/#","page":"API","title":"API","text":"n_ps – Number of facings of product p on shelf s\ns_p – Amount of product p sold\ne_p – Shortage of product p (mismatch between demand and on-shelf inventory)\no_p – Total empty space on shelf s\ny_p – 1 if product is assigned to module m, 0 otherwise","category":"page"},{"location":"api/#","page":"API","title":"API","text":"Basic Constraints","category":"page"},{"location":"api/#","page":"API","title":"API","text":"beginaligned\n n_ps  ℤ_0  ps \n y_p  01  p \n s_p  0  p \n e_p  0  p \n o_s  0  s \n \n n_ps=0  psH_p  H_s \n n_ps=0  psM_p  M_s^max \n _p n_ps  y_p  p \n N_p^min y_p  _s n_ps  N_p^max y_p  p \n s_p  minleft(_s frac30R_p P_ps n_ps D_pright)  p \n s_p + e_p = D_p  p \n _p W_p n_ps + o_s = W_s  s \nendaligned","category":"page"},{"location":"api/#","page":"API","title":"API","text":"Block Variables","category":"page"},{"location":"api/#","page":"API","title":"API","text":"z_bs – 1 if block is assigned on shelf s, otherwise 0\nz_bs^f – 1 if shelf s is the first shelf of block b, otherwise 0\nz_bs^l – 1 if shelf s is the last shelf of block b, otherwise 0\nb_bs – Width of block b on shelf s\nm_bm – Block width on module\nv_bm – 1 if block is assigned to module m, otherwise 0\nx_bs – Block starting location on shelf s\nx_bm – Block starting location on module m\nw_bb – 1 if block b precedes block b, otherwise 0","category":"page"},{"location":"api/#","page":"API","title":"API","text":"Block Constraints","category":"page"},{"location":"api/#","page":"API","title":"API","text":"beginaligned\n b_bs0  bs \n z_bs01  bs \n m_bm0  bm \n z_bs^f01  bs \n z_bs^l01  bs \n x_bs0  bs \n x_bm0  bm \n w_bb01  bb \n v_bm01  bm \n \n _pP_b W_p n_ps  b_bs  sb \n _b b_bs  W_s  s \n b_bs  W_s z_bs  bs \n b_bs  m_bm - W_s (1 - z_bs) - SL  bmssS_m \n b_bs  m_bm + W_s (1 - z_bs) + SL  bmssS_m \n \n _s z_bs^f  1  b \n _s z_bs^l  1  b \n z_bs^f = z_bs  bs=1 \n z_bs^l = z_bs  bs=S \n z_bs+1^f + z_bs = z_bs+1 + z_bs^l  bssS-1 \n \n _pP_b n_ps  z_bs  bs \n n_ps  N_p^max z_bs  bpspP_b \n \n x_bs  W_s z_bs  bs \n x_bs + b_bs  W_s  bs \n x_bs + W_s (1 - z_bs)  x_bs + b_bs - W_s (1 - w_bb)  bbmbb \n x_bs + W_s (1 - z_b s)  x_bs + b_bs - W_s w_bb  bbmbb \n x_bm  x_bs - W_s (1 - z_bs) - SL  bmssS_m \n x_bm  x_bs + W_s (1 - z_bs) + SL  bmssS_m \n \n n_ps  N_p^max v_bm  pbmssS_mpP_b \n _m v_bm  1  b\nendaligned","category":"page"},{"location":"heuristics/#Heuristics-1","page":"Heuristics","title":"Heuristics","text":"","category":"section"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"warning: Warning\nCurrently, heuristics are in an experimental state. Heuristics are tested only on a single instance. Therefore it cannot be guaranteed that they will obtain good results in all instances. Heuristics can be found at: examples/heuristics.jl","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Solving a mixed-integer linear program can be computationally difficult and integer programming is indeed NP-complete problem. Heuristics can be used to obtain feasible solutions and improving them faster than using deterministic algorithms by trading off some accuracy. Also, heuristics are not guaranteed to obtain good solutions. Two heuristics, relax-and-fix and fix-and-optimize, are covered here. In the literature, they are referred to as MIP-based heuristics, a type of metaheuristics. [Wolsey1998]","category":"page"},{"location":"heuristics/#Definitions-1","page":"Heuristics","title":"Definitions","text":"","category":"section"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Definitions in the context of linear programming heuristics.","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Relaxation means removing integrality constraint from a variable.\nFixing variable means setting a fixed value for a variable.","category":"page"},{"location":"heuristics/#Relax-and-Fix-1","page":"Heuristics","title":"Relax-and-Fix","text":"","category":"section"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"The goal of relax-and-fix heuristic is to find reasonably good feasible solutions fast. These solutions can be later improved with the fix-and-optimize heuristic.","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"The main design decision for relax-and-fix heuristic is choosing which variables will be relaxed. For shelf space allocation model the main options are the integer variables for number of facings n_ps and binary variables for block-shelf allocation z_bs, z_bs^f and z_bs^l. Testing indicated that relaxation of block-shelf allocation variables is a much better choice because the reduction to the computational time was much larger compared when using variables for number of facings.","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Block-shelf allocation variables have two indices, blocks b and shelves s. The most logical choice is to partition the variables by the blocks. This is done by partitioning the set of blocks B into n disjoint subsets B_1 B_2  B_n. This also determines the order in which the variables are relaxed. Partitioning affects the runtime and goodness of the heuristic solution. The optimal way to partition is still unknown to us and partitioning policy is a user decision.","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"example: Example\nFor example, B_1 could be partition to contain two blocks that are predicted to have most items allocated to the shelves, then partition B_2 to contain two blocks that are predicted to have second-most items allocated to the shelves and so forth.","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Relax-and-fix heuristic. Start the iteration counter from i=1.","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Relax. Solve the relaxed shelf space allocation model where","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"beginaligned\n z_bs z_bs^f z_bs^l01  bB_i s \n z_bs z_bs^f z_bs^l01  bB_i+1B_i+2B_n s\nendaligned","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Fix. Fix the variables z_bs z_bs^f z_bs^l for blocks bB_i and forall shelves s at their values.\nIf iteration counter is i=n return the solution. Otherwise, increment the iteration counter i by one and repeat from step 1.","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"The block-shelf variables will be relaxed by a subset of blocks at a time. This transforms the original problem into one where all the blocks are not being allocated at the same time but one subset of blocks at a time.","category":"page"},{"location":"heuristics/#Fix-and-Optimize-1","page":"Heuristics","title":"Fix-and-Optimize","text":"","category":"section"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"The goal of fix-and-optimize heuristic is to improve the existing feasible solution, for example, one obtained from relax-and-fix heuristic. Fix-and-optimize heuristic operates by fixing a part of the variables to the values in the existing solution and making the other variables unfixed and then performing the optimization.","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"For the shelf space allocation model, the block-shelf allocation variables were chosen as the target variables because they have the largest impact on the computational time. The simplest form of fix-and-optimize is to fix all of the target variables, which is used here. More intelligent strategies where only a part of the target variables are fixed could be beneficial for large instances, but this remains as a research question.","category":"page"},{"location":"heuristics/#Example-1","page":"Heuristics","title":"Example","text":"","category":"section"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"(Image: )","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"First, the shelf space allocation model is solved without the block constraints. It's very fast to solve and gives us a good starting point for setting the parameters for the heuristic.","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"(Image: )","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Compute the absolute amount of products allocated on the shelves per block. Sort the blocks from most items allocated to least items allocated. Partition these indices into sets of chosen size. For example, in this case the sorted sequence of blocks is (7 1 2 6 4 8 9 3 5) and they are partitioned into four sets B_1=7 1, B_2=2 6, B_3=4 8 and B_4=9 3 5.","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"This means that relax-and-fix heuristic will perform four iterations","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Next figures visualize which block allocation variables z_bs z_bs^f z_bs^l are fixed, binary and relaxed in each iteration.","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"(Image: )","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Relax-and-fix iteration 1:","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Fixed: b\nBinary: bB_1\nRelaxed: bB_2B_3B_4","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"(Image: )","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Relax-and-fix iteration 2:","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Fixed: bB_1\nBinary: bB_2\nRelaxed: bB_3B_4","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"(Image: )","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Relax-and-fix iteration 3:","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Fixed: bB_1B_2\nBinary: bB_3\nRelaxed: bB_4","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"(Image: )","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Relax-and-fix iteration 4:","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"Fixed: bB_1B_2B_3\nBinary: bB_4\nRelaxed: b","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"(Image: )","category":"page"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"The final solution is obtained by running the fix-and-optimize heuristic on the solution obtained by relax-and-fix. In this case, all block-shelf allocation variables z_bs z_bs^f z_bs^l and block-block relative order variables w_bb were fixed at their values.","category":"page"},{"location":"heuristics/#References-1","page":"Heuristics","title":"References","text":"","category":"section"},{"location":"heuristics/#","page":"Heuristics","title":"Heuristics","text":"[Wolsey1998]: Wolsey, L. A. (1998). Integer programming. Wiley.","category":"page"},{"location":"plotting/#Plotting-1","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"This section illustrates the results of the optimization model using visualizations implemented with Plots.jl.","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"using ShelfSpaceAllocation\noutput_dir = joinpath(\"output\", \"exact\", \"medium\")\nparameters = load_json(Params, joinpath(output_dir, \"parameters.json\"))\nvariables = load_json(Variables, joinpath(output_dir, \"variables.json\"))\nnothing; #hide","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"m = parameters.modules[1]\nprintln(parameters.modules)","category":"page"},{"location":"plotting/#Planogram-1","page":"Plotting","title":"Planogram","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot_planograms(parameters, variables)[m]","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"Planogram visualizes the product placing on the shelves. Blocks are indicated by the different colors.","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"Block allocation visualizes the block starting location x_bs and block width b_bs for each block and for each shelf.","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot_planogram\nplot_planograms\nplot_planogram_no_blocks\nplot_planograms_no_blocks","category":"page"},{"location":"plotting/#Product-Facings-1","page":"Plotting","title":"Product Facings","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot_product_facings(parameters, variables)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"Visualizes the number of product facings _s n_ps allocated per product. The opaque color indicates the maximum number of facings N_p^max allowed per product.","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot_product_facings","category":"page"},{"location":"plotting/#Demand-and-Sales-1","page":"Plotting","title":"Demand and Sales","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot_demand_and_sales(parameters, variables)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"Visualizes the sales s_p per product. The opaque color indicates the demand D_p per product.","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot_demand_and_sales","category":"page"},{"location":"plotting/#Demand-Sales-Percentage-1","page":"Plotting","title":"Demand-Sales Percentage","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot_demand_sales_percentage(parameters, variables)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"sum_pP_b s_p  sum_pP_b D_p","category":"page"},{"location":"plotting/#Allocation-Amount-1","page":"Plotting","title":"Allocation Amount","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot_allocation_amount(parameters, variables)","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"Allocation amount visualizes the total amount of products facings _pP_bsS n_ps allocated to the shelves per block.","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot_allocation_amount","category":"page"},{"location":"plotting/#Allocation-Percentage-1","page":"Plotting","title":"Allocation Percentage","text":"","category":"section"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"(Image: )","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"Allocation percentage visualizes the relative amount of product facings allocated to the shelves per block. Calculated by dividing the absolute amount of product facing allocated per block by the number of products that could be allocated to the shelves per block if there were no products from other blocks.","category":"page"},{"location":"plotting/#","page":"Plotting","title":"Plotting","text":"plot_allocation_percentage","category":"page"},{"location":"#ShelfSpaceAllocation.jl-1","page":"Model","title":"ShelfSpaceAllocation.jl","text":"","category":"section"},{"location":"#","page":"Model","title":"Model","text":"(Image: )","category":"page"},{"location":"#","page":"Model","title":"Model","text":"This section explains the mathematical formulation of the mixed integer linear program for solving the shelf space allocation problem. Ph.D. thesis by [Teresa2015] contains a good introduction to the shelf space allocation problem. We recommend to read the chapters 1.3 and 3 as they relate to the model we present here. Book by [Williams2013] covers how to model problems using mathematical programming including linear and integer programming.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"The objective of ShelfSpaceAllocationModel is produce an allocation for product to the shelves such that it minimizes losses while taking into account consumer demand for products, minimize empty space on shelves and place products at preferred heights. The model is tailored towards smaller retail stores for which the shelf space accounts for a large portion of the total inventory space. The resulting allocation can be used to product a Planogram for the retailers.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"A planogram is a diagram that shows how and where specific retail products should be placed on retail shelves or displays in order to increase customer purchases. [Rouse2010]","category":"page"},{"location":"#","page":"Model","title":"Model","text":"The model contains following constraints.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Integrality constraints – The number of products allocated to each shelf must be integral.\nPhysical constraints – Constraints limiting the physical dimensions, e.g. width, height, and weight, of the products on the shelves.\nControl constraints – Constraints which can be controlled by changing parameters values, such as the minimum number of product facings for a particular product or the preferred height placement for a product.\nBlock constraints – Constraints products which belong to the same category to be placed together in rectangular shapes.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"We can create an instance of the model using ShelfSpaceAllocationModel(::Params, ::Specs). We use the Specs struct to control whether we include block constraints into the model.","category":"page"},{"location":"#Sets-and-Subsets-1","page":"Model","title":"Sets and Subsets","text":"","category":"section"},{"location":"#","page":"Model","title":"Model","text":"Shelf space allocation problem consists of following sets and subsets:","category":"page"},{"location":"#","page":"Model","title":"Model","text":"pP – A set of products.\nsS – A set of shelves.\nbB – A set of blocks. Blocks are an index of mutually exclusive subsets of products.\nmM – A set of modules. Modules are an index of a mutually exclusive subset of shelves.\nP_bP – A block is a subset of products.\nS_mS – A module is a subset of shelves.","category":"page"},{"location":"#Parameters-1","page":"Model","title":"Parameters","text":"","category":"section"},{"location":"#","page":"Model","title":"Model","text":"Both products and shelves have several attributes associated with them. These attributes are also referred to as parameters since their values are given by the user. They are denoted using capital letters.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Product parameters:","category":"page"},{"location":"#","page":"Model","title":"Model","text":"N_p^min, N_p^max – The minimum and maximum number of facings for product p\nG_p – Unit profit of product p; used as shortage penalty (treated to be max0 G_p\nR_p – Replenishment period of product p\nD_p – Demand forecast of product p\nL_p – Priority weight for height placement of product p\nW_p – Facing width of product p\nH_p – Height of product p\nM_p – Unit weight of product p\nSK_p – Max stack per product p","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Shelf parameters:","category":"page"},{"location":"#","page":"Model","title":"Model","text":"M_s^min, M_s^max – The minimum and maximum unit weight on shelf s\nW_s – Width of shelf s\nH_s – Height of shelf s\nL_s – Shelf level, counted from bottom to top","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Product-shelf parameters:","category":"page"},{"location":"#","page":"Model","title":"Model","text":"P_ps – Number units per facing of product p on shelf s","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Constant parameters:","category":"page"},{"location":"#","page":"Model","title":"Model","text":"SL – Slack, maximum difference in block starting points and between block max and min width, default 00\nw_1 – Objective weight for empty_space_penalty, default 05\nw_2 – Objective weight for shortage_penalty, default 100\nw_3 – Objective weight for shelf_up_down_penalty, default 01","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Currently, the objective weights are set to empirically tested values.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"To pass parameters as arguments we use the Params struct. We can load parameters from CSV files using Params(::AbstractString, ::AbstractString).","category":"page"},{"location":"#Objective-1","page":"Model","title":"Objective","text":"","category":"section"},{"location":"#","page":"Model","title":"Model","text":"note: Note\nCurrently, JuMP doesn't support multi-objective optimization, and thus the weights are manually tuned such that the algorithm obtains satisfying solutions. However, solvers such as Gurobi have capabilities for multi-objective optimization and using them should be considered in the future.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"The shelf space allocation model contains multiple objectives. The multi-objective formulation is reduced into single objective using linear scalarization, i.e. weighted sum","category":"page"},{"location":"#","page":"Model","title":"Model","text":"min _i=1^n w_i f_i","category":"page"},{"location":"#","page":"Model","title":"Model","text":"where f_i are the objectives and w_i0 are the weight parameters. We have n=3 different individual objectives as follows.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"The total empty shelf space.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"f_1=_s o_s","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Total profit loss from product shortage.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"f_2=_p G_p e_p","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Product shelf height placement penalty. Preferres the placement of products with higher weight L_p to lower shelves.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"f_3=_ps L_p L_s n_ps","category":"page"},{"location":"#","page":"Model","title":"Model","text":"We use Objectives struct to store the objetive values after optimization. We can query the values from the model using Objectives(::ShelfSpaceAllocationModel) method.","category":"page"},{"location":"#Basic-Variables-and-Constraints-1","page":"Model","title":"Basic Variables and Constraints","text":"","category":"section"},{"location":"#","page":"Model","title":"Model","text":"(Image: )","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Number of facings of product p on shelf s","category":"page"},{"location":"#","page":"Model","title":"Model","text":"n_ps  ℤ_0quad ps","category":"page"},{"location":"#","page":"Model","title":"Model","text":"The height of product p allocated on shelf s must be less or equal to the shelf height","category":"page"},{"location":"#","page":"Model","title":"Model","text":"n_ps=0quad psH_p  H_s","category":"page"},{"location":"#","page":"Model","title":"Model","text":"The unit weight of product p allocated on shelf s must be less or equal to the maximum unit weight allowed on the shelf","category":"page"},{"location":"#","page":"Model","title":"Model","text":"n_ps=0quad psM_p  M_s^max","category":"page"},{"location":"#","page":"Model","title":"Model","text":"A decision variable which takes value 1, if a product is allocated to a shelf, 0 otherwise","category":"page"},{"location":"#","page":"Model","title":"Model","text":"y_p  01quad p","category":"page"},{"location":"#","page":"Model","title":"Model","text":"_p n_ps  y_pquad p","category":"page"},{"location":"#","page":"Model","title":"Model","text":"The total number of facings of product p must be within the given minimum and maximum","category":"page"},{"location":"#","page":"Model","title":"Model","text":"N_p^min y_p  _s n_ps  N_p^max y_pquad p","category":"page"},{"location":"#","page":"Model","title":"Model","text":"The amount of product p sold must be less or equal to the minimum of the expected sales and demand","category":"page"},{"location":"#","page":"Model","title":"Model","text":"s_p  0quad p","category":"page"},{"location":"#","page":"Model","title":"Model","text":"s_p  minleft(_s frac30R_p P_ps n_ps D_pright)quad p","category":"page"},{"location":"#","page":"Model","title":"Model","text":"note: Note\nThe constraint of the form zmin(xy) can be linearized by replacing it with two constraints zx and zy.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"The shortage of product p is the mismatch between demand and on-shelf inventory","category":"page"},{"location":"#","page":"Model","title":"Model","text":"e_p  0quad p","category":"page"},{"location":"#","page":"Model","title":"Model","text":"s_p + e_p = D_pquad p","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Total empty space on shelf s is the difference between the width of the shelf s and the total width of the products on shelf s","category":"page"},{"location":"#","page":"Model","title":"Model","text":"o_s  0quad s","category":"page"},{"location":"#","page":"Model","title":"Model","text":"_p W_p n_ps + o_s = W_squad s","category":"page"},{"location":"#","page":"Model","title":"Model","text":"We use Variables struct to store the variable values after optimization. We can query the values from the model using Variables(::ShelfSpaceAllocationModel) method.","category":"page"},{"location":"#Block-Variables-and-Constraints-1","page":"Model","title":"Block Variables and Constraints","text":"","category":"section"},{"location":"#","page":"Model","title":"Model","text":"(Image: )","category":"page"},{"location":"#","page":"Model","title":"Model","text":"The width of block b on shelf s must be larger or equal to the sum of the widths of products P_b on the shelf s","category":"page"},{"location":"#","page":"Model","title":"Model","text":"b_bs0quad bs","category":"page"},{"location":"#","page":"Model","title":"Model","text":"_pP_b W_p n_ps  b_bsquad bs","category":"page"},{"location":"#","page":"Model","title":"Model","text":"The sum of the block widths on each shelf s must be less or equal to the width of the shelf s","category":"page"},{"location":"#","page":"Model","title":"Model","text":"_b b_bs  W_squad s","category":"page"},{"location":"#","page":"Model","title":"Model","text":"An indicator variable which takes value 1 if block is assigned on a shelf s, 0 otherwise","category":"page"},{"location":"#","page":"Model","title":"Model","text":"z_bs01quad bs","category":"page"},{"location":"#","page":"Model","title":"Model","text":"b_bs  W_s z_bsquad bs","category":"page"},{"location":"#","page":"Model","title":"Model","text":"note: Note\nIndicator variable σ is a binary variable which is forced to take value 1 when x0, otherwise 0, by the constraint xMσ where M is a constant coefficient representing a known upper bound for x.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Block width on module m","category":"page"},{"location":"#","page":"Model","title":"Model","text":"m_bm0quad bm","category":"page"},{"location":"#","page":"Model","title":"Model","text":"b_bs  m_bm - W_s (1 - z_bs) - SLquad bmssS_m","category":"page"},{"location":"#","page":"Model","title":"Model","text":"b_bs  m_bm + W_s (1 - z_bs) + SLquad bmssS_m","category":"page"},{"location":"#","page":"Model","title":"Model","text":"","category":"page"},{"location":"#","page":"Model","title":"Model","text":"A decision variable which takes value 1 if shelf s is the first shelf of a block b, 0 otherwise","category":"page"},{"location":"#","page":"Model","title":"Model","text":"z_bs^f01quad bs","category":"page"},{"location":"#","page":"Model","title":"Model","text":"A decision variable which takes value 1 if shelf s is the last shelf of a block b, 0 otherwise","category":"page"},{"location":"#","page":"Model","title":"Model","text":"z_bs^l01quad bs","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Each block b has only one first shelf","category":"page"},{"location":"#","page":"Model","title":"Model","text":"_s z_bs^f  1quad b","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Each block b has only one last shelf","category":"page"},{"location":"#","page":"Model","title":"Model","text":"_s z_bs^l  1quad b","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Block assignment z_bs of block b is continuous from the first shelf to the last shelf of the block","category":"page"},{"location":"#","page":"Model","title":"Model","text":"z_bs^f = z_bsquad bs=1","category":"page"},{"location":"#","page":"Model","title":"Model","text":"z_bs^l = z_bsquad bs=S","category":"page"},{"location":"#","page":"Model","title":"Model","text":"z_bs+1^f + z_bs = z_bs+1 + z_bs^lquad bssS-1","category":"page"},{"location":"#","page":"Model","title":"Model","text":"","category":"page"},{"location":"#","page":"Model","title":"Model","text":"If block b is assigned on shelf s then the total number of facings assigned to shelf s must be at least one","category":"page"},{"location":"#","page":"Model","title":"Model","text":"_pP_b n_ps  z_bsquad bs","category":"page"},{"location":"#","page":"Model","title":"Model","text":"If block b is not assignment on shelf s then the number of facings of products in P_b on shelf s must be zero.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"n_ps  N_p^max z_bsquad bpspP_b","category":"page"},{"location":"#","page":"Model","title":"Model","text":"","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Block starting location (in mm) on shelf s","category":"page"},{"location":"#","page":"Model","title":"Model","text":"x_bs0quad bs","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Block starting location is zero if block b is not assigned on shelf s","category":"page"},{"location":"#","page":"Model","title":"Model","text":"x_bs  W_s z_bsquad bs","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Block ending location must not exceed the shelf width","category":"page"},{"location":"#","page":"Model","title":"Model","text":"x_bs + b_bs  W_squad bs","category":"page"},{"location":"#","page":"Model","title":"Model","text":"A decision variable which takes value 1 if block b precedes block b, 0 otherwise. Notice that b and b are mutually exclusive, i.e. bb","category":"page"},{"location":"#","page":"Model","title":"Model","text":"w_bb01quad bb","category":"page"},{"location":"#","page":"Model","title":"Model","text":"x_bs + W_s (1 - z_bs)  x_bs + b_bs - W_s (1 - w_bb)quad bbmbb","category":"page"},{"location":"#","page":"Model","title":"Model","text":"x_bs + W_s (1 - z_b s)  x_bs + b_bs - W_s w_bbquad bbmbb","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Block starting location on module m","category":"page"},{"location":"#","page":"Model","title":"Model","text":"x_bm0quad bm","category":"page"},{"location":"#","page":"Model","title":"Model","text":"x_bm  x_bs - W_s (1 - z_bs) - SLquad bmssS_m","category":"page"},{"location":"#","page":"Model","title":"Model","text":"x_bm  x_bs + W_s (1 - z_bs) + SLquad bmssS_m","category":"page"},{"location":"#","page":"Model","title":"Model","text":"","category":"page"},{"location":"#","page":"Model","title":"Model","text":"An indicator variable which takes value 1 if a block is assigned on a module, 0 otherwise","category":"page"},{"location":"#","page":"Model","title":"Model","text":"v_bm01quad bm","category":"page"},{"location":"#","page":"Model","title":"Model","text":"If a block is not assigned module there must be zero facings of the product belonging to the block on the shelves belonging to the module","category":"page"},{"location":"#","page":"Model","title":"Model","text":"n_ps  N_p^max v_bmquad pbmssS_mpP_b","category":"page"},{"location":"#","page":"Model","title":"Model","text":"Block b is assigned to only one module m","category":"page"},{"location":"#","page":"Model","title":"Model","text":"_m v_bm  1quad b","category":"page"},{"location":"#References-1","page":"Model","title":"References","text":"","category":"section"},{"location":"#","page":"Model","title":"Model","text":"[Teresa2015]: Teresa, M. (2015). The Retail Shelf Space Allocation Problem: New Optimization Methods Applied to a Supermarket Chain.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"[Williams2013]: Williams, H. P. (2013). Model building in mathematical programming. John Wiley & Sons.","category":"page"},{"location":"#","page":"Model","title":"Model","text":"[Rouse2010]: Rouse, M. (2010). What is planogram? Retrieved from https://whatis.techtarget.com/definition/planogram","category":"page"}]
}
